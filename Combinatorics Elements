prob:      https://codeforces.com/problemset/problem/1992/G
solution:  https://codeforces.com/problemset/submission/1992/277568061

int extended_euclid(LL a,LL b,LL &x,LL &y){
    if(b==0)
    {
        x=1;
        y=0;
        return a ;
    }
    /**
    gcd = x*b + y*(a%b) ;

    gcd = x*b + y*(a-(a/b)*b) ;

    gcd = x*b + y*a - y*(a/b)*b ;

    gcd = y*a + (x-(y*(a/b)))*b ;
    /**/

    LL temp , g ;
    g=extended_euclid(b,a%b,x,y);
    temp=x-y*(a/b) , x=y , y=temp ;
    return g ;
}

LL inverse_mod(LL C){
    LL x,y;
    extended_euclid(MOD,C,x,y);
    return ((y%MOD)+MOD)%MOD;
}

int mod_expo(int a,int b){
    if(b==0)
        return 1 ;
    int x=mod_expo(a,b>>1) ;
    x=x*x%MOD ; if(b&1)x=x*a%MOD ; return x ;
}

LL ncr(LL n,LL r){   /// this function calculates ncr upto N = 1e6 in O(n) time.
    if(r>n)
    {
        return 0 ;
    }
    if(Fact[0]==0)   /// for initialization.
    {
        Fact[0]=1;
        for(int i=1;i<N;i++)
        {
            Fact[i]=Fact[i-1]*i%MOD;
        }
        Inv[N-1] = mod_expo(Fact[N-1],MOD - 2);
        for (int i = N-2; i>=0; i--)
        {
            Inv[i] = Inv[i + 1] * (i + 1) % MOD;
        }
    }
    r=Inv[r]*Inv[n-r]%MOD;
    return Fact[n]*r%MOD;
    /// ncr calculate using triangle formula nCr = (n-1)Cr + (n-1)C(r-1) ;
}


------------------------------------------------------------


void Stirling_Number()
{
    s[0][0]=1 ;
    for(int i=1;i<=2000;++i)
    {
        for(int j=1;j<=2000;++j)
        {
            s[i][j] = ( s[i-1][j-1] + j*s[i-1][j] ) % MOD ;
        }
    }
}

lucas theorem . 
https://brilliant.org/wiki/lucas-theorem/

nice property of ncr 
https://codeforces.com/problemset/problem/1717/D
for(int i=1;i<=k;++i)
s+=ncr(n,i) ; 

/*catalan number 

1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700 ....(wihout any modulo)

2. 
applications : https://www.geeksforgeeks.org/applications-of-catalan-numbers/

name : counting perfect bst  
link : https://lightoj.com/problem/counting-perfect-bst
description :  given a set of numbers . find how many number of binary search tree possible .
why  : 
(i)   you need to know what is katalan number . (2n)!/((n+1)!*n!) is it's formula . 
(ii)  still it was solvable because perfect numbers won't be too much . dp will work . 
(iii) but if the constraint would be too large we must have to use catalan number . 



//// for online contest modulo operation .... 

#include<bits/stdc++.h>
using namespace std;

template <int MOD_> struct modnum {
	static constexpr int MOD = MOD_;
	static_assert(MOD_ > 0, "MOD must be positive");

private:
	using ll = long long;

	int v;

	static int minv(int a, int m) {
		a %= m;
		assert(a);
		return a == 1 ? 1 : int(m - ll(minv(m, a)) * ll(m) / a);
	}

public:

	modnum() : v(0) {}
	modnum(ll v_) : v(int(v_ % MOD)) { if (v < 0) v += MOD; }
	explicit operator int() const { return v; }
	friend std::ostream& operator << (std::ostream& out, const modnum& n) { return out << int(n); }
	friend std::istream& operator >> (std::istream& in, modnum& n) { ll v_; in >> v_; n = modnum(v_); return in; }

	friend bool operator == (const modnum& a, const modnum& b) { return a.v == b.v; }
	friend bool operator != (const modnum& a, const modnum& b) { return a.v != b.v; }

	modnum inv() const {
		modnum res;
		res.v = minv(v, MOD);
		return res;
	}
	modnum neg() const {
		modnum res;
		res.v = v ? MOD-v : 0;
		return res;
	}

	modnum operator- () const {
		return neg();
	}
	modnum operator+ () const {
		return modnum(*this);
	}

	modnum& operator ++ () {
		v ++;
		if (v == MOD) v = 0;
		return *this;
	}
	modnum& operator -- () {
		if (v == 0) v = MOD;
		v --;
		return *this;
	}
	modnum& operator += (const modnum& o) {
		v += o.v;
		if (v >= MOD) v -= MOD;
		return *this;
	}
	modnum& operator -= (const modnum& o) {
		v -= o.v;
		if (v < 0) v += MOD;
		return *this;
	}
	modnum& operator *= (const modnum& o) {
		v = int(ll(v) * ll(o.v) % MOD);
		return *this;
	}
	modnum& operator /= (const modnum& o) {
		return *this *= o.inv();
	}

	friend modnum operator ++ (modnum& a, int) { modnum r = a; ++a; return r; }
	friend modnum operator -- (modnum& a, int) { modnum r = a; --a; return r; }
	friend modnum operator + (const modnum& a, const modnum& b) { return modnum(a) += b; }
	friend modnum operator - (const modnum& a, const modnum& b) { return modnum(a) -= b; }
	friend modnum operator * (const modnum& a, const modnum& b) { return modnum(a) *= b; }
	friend modnum operator / (const modnum& a, const modnum& b) { return modnum(a) /= b; }
};
using num = modnum<998244353>;

const int MAXN = 2.1e5;
int N;
bool X[MAXN];

int main() {
	ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	num ans = 0;
	int x = 100 ;
    ans=ans+x ;
	return 0;
}




