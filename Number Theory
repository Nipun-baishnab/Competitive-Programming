/// Euler totient phi . Given n . Calculates number of coprimes <=n . 

void Totient_Phi()
{
    for(int i=1;i<N;++i)
    {
        phi[i]=i ;
    }
    for(int i=2;i<N;++i)
    {
        if(chk[i]==0) /// prime
        {
            for(int j=i;j<N;j+=i)
            {
               phi[j]=(a[j]/i)*(i-1) ;
               chk[j]=1 ;
            }
        }
    }
}

int inclusion_exlcusion (int n, int r) {
    vector<int> p;
    for (int i=2; i*i<=n; ++i)
        if (n % i == 0) {
            p.push_back (i);
            while (n % i == 0)
                n /= i;
        }
    if (n > 1)
        p.push_back (n);

    int sum = 0;
    for (int msk=1; msk<(1<<p.size()); ++msk) {
        int mult = 1,
            bits = 0;
        for (int i=0; i<(int)p.size(); ++i)
            if (msk & (1<<i)) {
                ++bits;
                mult *= p[i];
            }

        int cur = r / mult;
        if (bits % 2 == 1)
            sum += cur;
        else
            sum -= cur;
    }

    return r - sum;
}
